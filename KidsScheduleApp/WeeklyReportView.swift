import SwiftUI

struct WeeklyReportView: View {
    @Environment(\.dismiss) private var dismiss
    let overview: WorkWeeklyOverview
    @State private var showingShareSheet = false
    @State private var showingCopySuccess = false
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    // Êä•ÂëäÊ†áÈ¢ò
                    Text("üìà \(overview.formattedWeekRange) Âë®Êä•")
                        .font(.title)
                        .fontWeight(.bold)
                    
                    // Êú¨Âë®Â∑•‰ΩúÂÜÖÂÆπ
                    thisWeekTasksSection
                    
                    // Êú¨Âë®Â∑•‰ΩúÊÄªÁªì
                    thisWeekSummarySection
                    
                    // ‰∏ãÂë®ËÆ°Âàí
                    nextWeekPlanSection
                    
                    // ÁªüËÆ°Ê¶ÇËßà
                    weeklyStatisticsSection
                }
                .padding()
            }
            .navigationTitle("üìà Âë®Êä•")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("ÂÖ≥Èó≠") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    HStack(spacing: 16) {
                        Button("Â§çÂà∂") {
                            copyWeeklyReportText()
                        }
                        .foregroundColor(.blue)

                        Button("ÂàÜ‰∫´") {
                            showingShareSheet = true
                        }
                        .foregroundColor(.blue)
                    }
                }
            }
            .sheet(isPresented: $showingShareSheet) {
                ShareSheet(activityItems: [generateWeeklyReportText()])
            }
            .overlay(
                // Â§çÂà∂ÊàêÂäüÊèêÁ§∫
                Group {
                    if showingCopySuccess {
                        VStack {
                            Spacer()
                            HStack {
                                Spacer()
                                Text("‚úÖ Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø")
                                    .font(.caption)
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 8)
                                    .background(Color.black.opacity(0.8))
                                    .foregroundColor(.white)
                                    .cornerRadius(20)
                                Spacer()
                            }
                            .padding(.bottom, 100)
                        }
                        .transition(.opacity)
                    }
                }
            )
        }
    }
    
    // MARK: - Êú¨Âë®Â∑•‰ΩúÂÜÖÂÆπ
    private var thisWeekTasksSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üìã Êú¨Âë®Â∑•‰ΩúÂÜÖÂÆπ")
                .font(.headline)
                .fontWeight(.semibold)
                .foregroundColor(.blue)
            
            if overview.allTasks.isEmpty {
                Text("Êú¨Âë®ÊöÇÊó†‰ªªÂä°")
                    .foregroundColor(.secondary)
                    .padding(.vertical, 8)
            } else {
                ForEach(Array(overview.allTasks.enumerated()), id: \.offset) { index, task in
                    HStack(alignment: .top, spacing: 8) {
                        Text("\(index + 1).")
                            .fontWeight(.medium)
                            .foregroundColor(.blue)
                        
                        VStack(alignment: .leading, spacing: 4) {
                            Text(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°")
                                .fontWeight(.medium)
                            
                            HStack {
                                Text("\(categoryIcon(for: task.category ?? "ÂÖ∂‰ªñ")) \(task.category ?? "ÂÖ∂‰ªñ")")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                
                                Spacer()
                                
                                if task.isCompleted {
                                    Text("‚úÖ Â∑≤ÂÆåÊàê")
                                        .font(.caption)
                                        .foregroundColor(.green)
                                } else {
                                    Text("üîÑ \(task.formattedWorkProgress)")
                                        .font(.caption)
                                        .foregroundColor(.orange)
                                }
                            }
                        }
                    }
                    .padding(.vertical, 4)
                }
            }
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
    }
    
    // MARK: - Êú¨Âë®Â∑•‰ΩúÊÄªÁªì
    private var thisWeekSummarySection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üìù Êú¨Âë®Â∑•‰ΩúÊÄªÁªì")
                .font(.headline)
                .fontWeight(.semibold)
                .foregroundColor(.green)
            
            if overview.allTasks.isEmpty {
                Text("Êú¨Âë®ÊöÇÊó†Â∑•‰ΩúÊÄªÁªì")
                    .foregroundColor(.secondary)
                    .padding(.vertical, 8)
            } else {
                // ÊåâÁ±ªÂûãÂàÜÁªÑÊòæÁ§∫ÊÄªÁªì
                ForEach(Array(overview.tasksByCategory.keys.sorted()), id: \.self) { category in
                    let tasks = overview.tasksByCategory[category] ?? []
                    let completed = tasks.filter { $0.isCompleted }
                    let ongoing = tasks.filter { !$0.isCompleted }
                    
                    VStack(alignment: .leading, spacing: 8) {
                        HStack {
                            Text("\(categoryIcon(for: category)) \(category)")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                                .foregroundColor(.green)
                            
                            Spacer()
                            
                            Text("\(completed.count)/\(tasks.count) ÂÆåÊàê")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        
                        // Â∑≤ÂÆåÊàê‰ªªÂä°
                        if !completed.isEmpty {
                            Text("‚úÖ Â∑≤ÂÆåÊàêÔºö")
                                .font(.caption)
                                .fontWeight(.medium)
                                .padding(.leading, 20)
                            
                            ForEach(completed, id: \.objectID) { task in
                                HStack {
                                    Text("‚Ä¢ \(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°")")
                                        .font(.caption)
                                    
                                    Spacer()
                                    
                                    if task.timeSpent > 0 {
                                        Text(task.formattedTimeSpent)
                                            .font(.caption)
                                            .foregroundColor(.purple)
                                    }
                                }
                                .padding(.leading, 30)
                            }
                        }
                        
                        // ËøõË°å‰∏≠‰ªªÂä°
                        if !ongoing.isEmpty {
                            Text("üîÑ ËøõË°å‰∏≠Ôºö")
                                .font(.caption)
                                .fontWeight(.medium)
                                .padding(.leading, 20)
                            
                            ForEach(ongoing, id: \.objectID) { task in
                                HStack {
                                    Text("‚Ä¢ \(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°")")
                                        .font(.caption)
                                    
                                    Spacer()
                                    
                                    Text(task.formattedWorkProgress)
                                        .font(.caption)
                                        .foregroundColor(.orange)
                                }
                                .padding(.leading, 30)
                            }
                        }
                    }
                    .padding(.vertical, 6)
                    
                    if category != overview.tasksByCategory.keys.sorted().last {
                        Divider()
                    }
                }
            }
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
    }
    
    // MARK: - ‰∏ãÂë®ËÆ°Âàí
    private var nextWeekPlanSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üéØ ‰∏ãÂë®ËÆ°Âàí")
                .font(.headline)
                .fontWeight(.semibold)
                .foregroundColor(.purple)
            
            let ongoingTasks = overview.allTasks.filter { !$0.isCompleted }

            if ongoingTasks.isEmpty {
                Text("ÊöÇÊó†‰∏ãÂë®ËÆ°Âàí")
                    .foregroundColor(.secondary)
                    .padding(.vertical, 8)
            } else {
                Text("ÁªßÁª≠Êé®Ëøõ‰ª•‰∏ã‰ªªÂä°Ôºö")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                ForEach(Array(ongoingTasks.enumerated()), id: \.offset) { index, task in
                    HStack(alignment: .top, spacing: 8) {
                        Text("\(index + 1).")
                            .fontWeight(.medium)
                            .foregroundColor(.purple)
                        
                        VStack(alignment: .leading, spacing: 4) {
                            Text(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°")
                                .fontWeight(.medium)
                            
                            HStack {
                                Text("\(categoryIcon(for: task.category ?? "ÂÖ∂‰ªñ")) \(task.category ?? "ÂÖ∂‰ªñ")")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                
                                Spacer()
                                
                                Text("ÂΩìÂâçËøõÂ∫¶Ôºö\(task.formattedWorkProgress)")
                                    .font(.caption)
                                    .foregroundColor(.orange)
                            }
                        }
                    }
                    .padding(.vertical, 4)
                }
            }
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
    }
    
    // MARK: - ÁªüËÆ°Ê¶ÇËßà
    private var weeklyStatisticsSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üìä Êú¨Âë®ÁªüËÆ°")
                .font(.headline)
                .fontWeight(.semibold)
                .foregroundColor(.gray)
            
            HStack(spacing: 12) {
                StatCard(title: "ÊÄª‰ªªÂä°", value: "\(overview.allTasks.count)", color: .blue)
                StatCard(title: "Â∑≤ÂÆåÊàê", value: "\(overview.completedCount)", color: .green)
                StatCard(title: "ÂÆåÊàêÁéá", value: "\(String(format: "%.0f", overview.completionRate))%", color: .orange)
            }
            
            HStack(spacing: 12) {
                StatCard(title: "ÊÄªÊó∂Èïø", value: "\(String(format: "%.1f", overview.totalTimeSpent))h", color: .purple)
                StatCard(title: "Âπ≥ÂùáËøõÂ∫¶", value: "\(String(format: "%.0f", overview.averageProgress))%", color: .indigo)
                StatCard(title: "ËøõË°å‰∏≠", value: "\(overview.ongoingCount)", color: .orange)
            }
            
            if !overview.tasksByCategory.isEmpty {
                Divider()
                
                Text("ÂàÜÁ±ªÁªüËÆ°")
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                ForEach(Array(overview.tasksByCategory.keys.sorted()), id: \.self) { category in
                    let tasks = overview.tasksByCategory[category] ?? []
                    let completed = tasks.filter { $0.isCompleted }.count
                    let totalTime = tasks.reduce(0) { $0 + $1.timeSpent }
                    
                    HStack {
                        Text("\(categoryIcon(for: category)) \(category)")
                        Spacer()
                        VStack(alignment: .trailing, spacing: 2) {
                            Text("\(completed)/\(tasks.count)")
                                .fontWeight(.medium)
                            if totalTime > 0 {
                                Text("\(String(format: "%.1f", totalTime))h")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }
                    .font(.caption)
                }
            }
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
    }
    
    // MARK: - ËæÖÂä©ÊñπÊ≥ï
    private func categoryIcon(for category: String) -> String {
        switch category {
        case "Â∑•‰Ωú":
            return "üíº"
        case "Â≠¶‰π†":
            return "üìö"
        case "ËøêÂä®":
            return "üèÉ"
        case "Â®±‰πê":
            return "üéÆ"
        case "ÁîüÊ¥ª":
            return "üè†"
        case "ÂÖ∂‰ªñ":
            return "üìù"
        default:
            return "üìã"
        }
    }
    
    private func generateWeeklyReportText() -> String {
        var text = """
        üìà \(overview.formattedWeekRange) Âë®Êä•
        
        üìã Êú¨Âë®Â∑•‰ΩúÂÜÖÂÆπÔºö
        """
        
        for (index, task) in overview.allTasks.enumerated() {
            text += "\n\(index + 1). \(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°")"
        }
        
        text += "\n\nüìù Êú¨Âë®Â∑•‰ΩúÊÄªÁªìÔºö"
        
        for category in overview.tasksByCategory.keys.sorted() {
            let tasks = overview.tasksByCategory[category] ?? []
            let completed = tasks.filter { $0.isCompleted }
            let ongoing = tasks.filter { !$0.isCompleted }
            
            text += "\n\n\(categoryIcon(for: category)) \(category) (\(completed.count)/\(tasks.count) ÂÆåÊàê)Ôºö"
            
            if !completed.isEmpty {
                text += "\n‚úÖ Â∑≤ÂÆåÊàêÔºö"
                for task in completed {
                    text += "\n  ‚Ä¢ \(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°")"
                }
            }
            
            if !ongoing.isEmpty {
                text += "\nüîÑ ËøõË°å‰∏≠Ôºö"
                for task in ongoing {
                    text += "\n  ‚Ä¢ \(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°") (\(task.formattedWorkProgress))"
                }
            }
        }
        
        text += "\n\nüéØ ‰∏ãÂë®ËÆ°ÂàíÔºö"
        let ongoingTasks = overview.allTasks.filter { !$0.isCompleted }
        for (index, task) in ongoingTasks.enumerated() {
            text += "\n\(index + 1). \(task.title ?? "Êú™ÂëΩÂêç‰ªªÂä°")"
        }
        
        text += "\n\nüìä Êú¨Âë®ÁªüËÆ°Ôºö"
        text += "\n‚Ä¢ ÊÄª‰ªªÂä°Ôºö\(overview.allTasks.count)È°π"
        text += "\n‚Ä¢ Â∑≤ÂÆåÊàêÔºö\(overview.completedCount)È°π"
        text += "\n‚Ä¢ ÂÆåÊàêÁéáÔºö\(String(format: "%.1f", overview.completionRate))%"
        text += "\n‚Ä¢ ÊÄªÊó∂ÈïøÔºö\(String(format: "%.1f", overview.totalTimeSpent))Â∞èÊó∂"
        text += "\n‚Ä¢ Âπ≥ÂùáËøõÂ∫¶Ôºö\(String(format: "%.1f", overview.averageProgress))%"
        
        return text
    }

    private func copyWeeklyReportText() {
        let reportText = generateWeeklyReportText()
        UIPasteboard.general.string = reportText

        // ÊòæÁ§∫Â§çÂà∂ÊàêÂäüÊèêÁ§∫
        withAnimation(.easeInOut(duration: 0.3)) {
            showingCopySuccess = true
        }

        // 2ÁßíÂêéÈöêËóèÊèêÁ§∫
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            withAnimation(.easeInOut(duration: 0.3)) {
                showingCopySuccess = false
            }
        }
    }
}

#Preview {
    @Previewable @State var overview: WorkWeeklyOverview = {
        let context = PersistenceController.preview.container.viewContext

        let task1 = TaskItem(context: context)
        task1.title = "ÂÆåÊàêÈ°πÁõÆÊä•Âëä"
        task1.category = "Â∑•‰Ωú"
        task1.isCompleted = true
        task1.timeSpent = 8.0

        let task2 = TaskItem(context: context)
        task2.title = "Â≠¶‰π†Swift"
        task2.category = "Â≠¶‰π†"
        task2.isCompleted = false
        task2.workProgress = 60.0
        task2.timeSpent = 4.0

        let tasksByCategory = [
            "Â∑•‰Ωú": [task1],
            "Â≠¶‰π†": [task2]
        ]

        return WorkWeeklyOverview(
            weekStart: Date(),
            weekEnd: Calendar.current.date(byAdding: .day, value: 7, to: Date()) ?? Date(),
            allTasks: [task1, task2],
            tasksByCategory: tasksByCategory,
            totalTimeSpent: 12.0,
            averageProgress: 80.0,
            completedCount: 1,
            ongoingCount: 1
        )
    }()

    WeeklyReportView(overview: overview)
}
